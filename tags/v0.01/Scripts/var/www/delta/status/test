#!/usr/bin/perl

## Copyright (C) 2005 Walinsky
## This program is free software; you can redistribute it and/or modify it
## under the terms of the GNU General Public License as published by the 
## Free Software Foundation; either version 2 of the License, or (at your option)
## any later version.

##  <methodCall>
##    <methodName>status.rootFolders</methodName>
##    <params>
##      <param>
##          <value>
##            <string>{username}</string>
##          </value>
##      </param>
##    </params>
##  </methodCall>

##  <methodCall>
##    <methodName>status.timestamp</methodName>
##    <params>
##      <param>
##          <value>
##            <string>{username}</string>
##          </value>
##      </param>
##    </params>
##  </methodCall>

##  <methodCall>
##    <methodName>status.options</methodName>
##    <params>
##      <param>
##          <value>
##            <string>{username}</string>
##          </value>
##      </param>
##    </params>
##  </methodCall>

##  <methodCall>
##    <methodName>status.query</methodName>
##    <params>
##      <param>
##          <value>
##            <string>{username}</string>
##          </value>
##      </param>
##      <param>
##          <value>
##            <string>GUID</string>
##          </value>
##      </param>
##      <param>
##          <value>
##            <string>112d99bda88</string>
##          </value>
##      </param>
##    </params>
##  </methodCall>
##gives: <?xml version="1.0" encoding="ISO-8859-1"?><methodResponse><params><param><value><struct><member><name>resultCode</name><value>clientIsCurrent</value></member><member><name>timestamp</name><value>112d99bda88</value></member><member><name>resultType</name><value>Query</value></member></struct></value></param></params></methodResponse>

use XML::DOM;
my $TimeStamp = time();
my $paddedTimestamp = $TimeStamp * 1000;
my $HexTimeStamp = dec2hex($paddedTimestamp);

use Time::HiRes;
my $start = [ Time::HiRes::gettimeofday( ) ];

$logFile="logfile";
# we should check if it's a post message
if ($ENV{'REQUEST_METHOD'} eq 'POST') {
	read(STDIN, $my_data, $ENV{'CONTENT_LENGTH'});
	}
# instantiate parser
$xp = new XML::DOM::Parser();
# parse and create tree
$doc = $xp->parse($my_data);
# get root node
$root = $doc->getDocumentElement();
my $strings = $root->getElementsByTagName("methodName");
my $n = $strings->getLength;
for (my $i = 0; $i < $n; $i++)
 {
	my $string = $strings->item ($i)->getFirstChild()->getData;
	if ($string eq "status.rootFolders") {
		$answer = "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>
		<methodResponse>
		<params><param>
			<value><struct>
				<member><name>resultCode</name><value>Success</value></member>
				<member><name>rootDirectory</name><value><array><data>
					<value><struct>
						<member><name>folderName</name><value>/Documents</value></member>
						<member><name>ignoreChildren</name><value><boolean>0</boolean></value></member>
					</struct></value>
					<value><struct>
						<member><name>folderName</name><value>/Movies</value></member>
						<member><name>ignoreChildren</name><value><boolean>0</boolean></value></member>
					</struct></value>
					<value><struct>
						<member><name>folderName</name><value>/Music</value></member>
						<member><name>ignoreChildren</name><value><boolean>0</boolean></value></member>
					</struct></value>
					<value><struct>
						<member><name>folderName</name><value>/Pictures</value></member>
						<member><name>ignoreChildren</name><value><boolean>0</boolean></value></member>
					</struct></value>
					<value><struct>
						<member><name>folderName</name><value>/Public</value></member>
						<member><name>ignoreChildren</name><value><boolean>0</boolean></value></member>
					</struct></value>
					<value><struct>
						<member><name>folderName</name><value>/Sites</value></member>
						<member><name>ignoreChildren</name><value><boolean>0</boolean></value></member>
					</struct></value>
					<value><struct>
						<member><name>folderName</name><value>/Backup</value></member>
						<member><name>ignoreChildren</name><value><boolean>1</boolean></value></member>
					</struct></value>
					<value><struct>
						<member><name>folderName</name><value>/Library</value></member>
						<member><name>ignoreChildren</name><value><boolean>1</boolean></value></member>
					</struct></value>
					<value><struct>
						<member><name>folderName</name><value>/Software</value></member>
						<member><name>ignoreChildren</name><value><boolean>1</boolean></value></member>
					</struct></value>
					<value><struct>
						<member><name>folderName</name><value>/Shared</value></member>
						<member><name>ignoreChildren</name><value><boolean>1</boolean></value></member>
					</struct></value>
					<value><struct>
						<member><name>folderName</name><value>/Groups</value></member>
						<member><name>ignoreChildren</name><value><boolean>1</boolean></value></member>
					</struct></value>
					<value><struct>
						<member><name>folderName</name><value>/.Groups</value></member>
						<member><name>ignoreChildren</name><value><boolean>1</boolean></value></member>
					</struct></value>
					<value><struct>
						<member><name>folderName</name><value>/.FileSync</value></member>
						<member><name>ignoreChildren</name><value><boolean>1</boolean></value></member>
					</struct></value>
					<value><struct>
						<member><name>folderName</name><value>/.fseventsd</value></member>
						<member><name>ignoreChildren</name><value><boolean>1</boolean></value></member>
					</struct></value>
					<value><struct>
						<member><name>folderName</name><value>/Calendars</value></member>
						<member><name>ignoreChildren</name><value><boolean>1</boolean></value></member>
					</struct></value>
					<value><struct>
						<member><name>folderName</name><value>/Web</value></member>
						<member><name>ignoreChildren</name><value><boolean>1</boolean></value></member>
					</struct></value>
				</data></array></value></member>
			<member><name>rootFolders</name><value><array><data>
				<value><struct>
					<member><name>folderName</name><value>/Documents</value></member>
					<member><name>ignoreChildren</name><value><boolean>0</boolean></value></member>
				</struct></value>
				<value><struct>
					<member><name>folderName</name><value>/Movies</value></member>
					<member><name>ignoreChildren</name><value><boolean>0</boolean></value></member>
				</struct></value>
				<value><struct>
					<member><name>folderName</name><value>/Music</value></member>
					<member><name>ignoreChildren</name><value><boolean>0</boolean></value></member>
				</struct></value>
				<value><struct>
					<member><name>folderName</name><value>/Pictures</value></member>
					<member><name>ignoreChildren</name><value><boolean>0</boolean></value></member>
				</struct></value>
				<value><struct>
					<member><name>folderName</name><value>/Public</value></member>
					<member><name>ignoreChildren</name><value><boolean>0</boolean></value></member><
				/struct></value>
				<value><struct>
					<member><name>folderName</name><value>/Sites</value></member>
					<member><name>ignoreChildren</name><value><boolean>0</boolean></value></member>
				</struct></value>
				<value><struct>
					<member><name>folderName</name><value>/Backup</value></member>
					<member><name>ignoreChildren</name><value><boolean>1</boolean></value></member>
				</struct></value>
				<value><struct>
					<member><name>folderName</name><value>/Library</value></member>
					<member><name>ignoreChildren</name><value><boolean>1</boolean></value></member>
				</struct></value>
				<value><struct>
					<member><name>folderName</name><value>/Software</value></member>
					<member><name>ignoreChildren</name><value><boolean>1</boolean></value></member>
				</struct></value>
				<value><struct>
					<member><name>folderName</name><value>/Shared</value></member>
					<member><name>ignoreChildren</name><value><boolean>1</boolean></value></member>
				</struct></value>
				<value><struct>
					<member><name>folderName</name><value>/Groups</value></member>
					<member><name>ignoreChildren</name><value><boolean>1</boolean></value></member>
				</struct></value>
				<value><struct>
					<member><name>folderName</name><value>/.Groups</value></member>
					<member><name>ignoreChildren</name><value><boolean>1</boolean></value></member>
				</struct></value>
				<value><struct>
					<member><name>folderName</name><value>/.FileSync</value></member>
					<member><name>ignoreChildren</name><value><boolean>1</boolean></value></member>
				</struct></value>
				<value><struct>
					<member><name>folderName</name><value>/.fseventsd</value></member>
					<member><name>ignoreChildren</name><value><boolean>1</boolean></value></member>
				</struct></value>
				<value><struct>
					<member><name>folderName</name><value>/Calendars</value></member>
					<member><name>ignoreChildren</name><value><boolean>1</boolean></value></member>
				</struct></value>
				<value><struct>
					<member><name>folderName</name><value>/Web</value></member>
					<member><name>ignoreChildren</name><value><boolean>1</boolean></value></member>
				</struct></value>
			</data></array></value></member>
			<member><name>timestamp</name><value>$HexTimeStamp</value></member>
			<member><name>resultType</name><value>rootFolders</value></member>
		</struct></value>
	</param></params>
	</methodResponse>";
		}
	elsif ($string eq "status.timestamp") {
		$answer = "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><methodResponse><params><param><value><struct><member><name>resultCode</name><value>Success</value></member><member><name>timestamp</name><value>$HexTimeStamp</value></member><member><name>resultType</name><value>Timestamp</value></member></struct></value></param></params></methodResponse>";
		}
	elsif ($string eq "status.options") {
		$answer = "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>
<methodResponse>
	<params>
		<param>
			<value>
				<struct>
					<member>
						<name>presumeStaleAfterDays</name>
						<value><int>30</int></value>
					</member>
					<member>
						<name>minimumQueryInterval</name>
						<value><int>36000</int></value>
					</member>
					<member>
						<name>optionsValidityPeriod</name>
						<value><int>600</int></value>
					</member>
					<member>
						<name>resultCode</name>
						<value>Success</value>
					</member>
					<member>
						<name>fullScanMinimum</name>
						<value><int>86400</int></value>
					</member>
					<member>
						<name>Options</name>
						<value>
							<struct>
								<member>
									<name>presumeStaleAfterDays</name>
									<value><int>30</int></value>
								</member>
								<member>
									<name>minimumQueryInterval</name>
									<value><int>36000</int></value>
								</member>
								<member>
									<name>optionsValidityPeriod</name>
									<value><int>600</int></value>
								</member>
								<member>
									<name>fullScanMinimum</name>
									<value><int>86400</int></value>
								</member>
								<member>
									<name>firstWait</name>
									<value><int>5</int></value>
								</member>
								<member>
									<name>refreshWait</name>
									<value><int>2</int></value>
								</member>
							</struct>
						</value>
					</member>
					<member>
						<name>timestamp</name>
						<value>$HexTimeStamp</value>
					</member>
					<member>
						<name>firstWait</name>
						<value><int>5</int></value>
					</member>
					<member>
						<name>refreshWait</name>
						<value><int>2</int></value>
					</member>
					<member>
						<name>resultType</name>
						<value>Options</value>
					</member>
				</struct>
			</value>
		</param>
	</params>
</methodResponse>";
		}
 }
# set up HTML page
print "Content-Type: text/xml\n\n";


print $answer;

# uncheck following 3 lines if you want to record to your log File
open(LOGGER,">>$logFile") || `cat /dev/null > $logFile;chmod 666 $logFile`;
print LOGGER "indata was:\n".$my_data."\nI gave 'em \n".$answer."\n\n";

print LOGGER "Local time: ".$TimeStamp."\n\n";
print LOGGER "paddedTimestamp: ".$paddedTimestamp."\n\n";
print LOGGER "HexTimeStamp: ".$HexTimeStamp."\n\n";


close(LOGGER);
exit;

 sub dec2hex {
    # parameter passed to
    # the subfunction
    my $decnum = $_[0];
    # the final hex number
    my $hexnum;
    my $tempval;
    while ($decnum != 0) {
    # get the remainder (modulus function)
    # by dividing by 16
    $tempval = $decnum % 16;
    # convert to the appropriate letter
    # if the value is greater than 9
    if ($tempval > 9) {
    $tempval = chr($tempval + 87); # 55 for uppercase
    }
    # 'concatenate' the number to 
    # what we have so far in what will
    # be the final variable
    $hexnum = $tempval . $hexnum ;
    # new actually divide by 16, and 
    # keep the integer value of the 
    # answer
    $decnum = int($decnum / 16); 
    # if we cant divide by 16, this is the
    # last step
    if ($decnum < 16) {
    # convert to letters again..
    if ($decnum > 9) {
    $decnum = chr($decnum + 87); # 55 for uppercase
    }
    
    # add this onto the final answer.. 
    # reset decnum variable to zero so loop
    # will exit
    $hexnum = $decnum . $hexnum; 
    $decnum = 0 
    }
    }
    return $hexnum;
    } # end sub