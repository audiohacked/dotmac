#!/usr/bin/perl

## Copyright (C) 2005 Walinsky
## This program is free software; you can redistribute it and/or modify it
## under the terms of the GNU General Public License as published by the 
## Free Software Foundation; either version 2 of the License, or (at your option)
## any later version.

use XML::DOM;
# instantiate parser for indata
my $xp = new XML::DOM::Parser();

$logFile="logfile";

# $my_data="syncmgmt02.trial.req";
# $doc = $xp->parsefile($my_data);

# we should check if it's a post message
if ($ENV{'REQUEST_METHOD'} eq 'POST') {
read(STDIN, $my_data, $ENV{'CONTENT_LENGTH'});
	}
$doc = $xp->parse($my_data);




# instantiate new xml doc (our answer)
my $xpa = XML::DOM::Document->new();
# create root element
my $answer = $xpa->createElement('response');
$answer->setAttribute("version", "1.0");
$answer->setAttribute("id", "");





my $request = $doc->getElementsByTagName('request')->[0];
my $requestversion = $request->getAttributeNode('version')->getValue;
my $requestid = $request->getAttributeNode('id')->getValue;

my $transactions = $request->getElementsByTagName('transaction');
my $transactionCount = $transactions->getLength();
for (my $i = 0; $i < $transactionCount; $i++)
{
	my $transaction = $transactions->[$i];
	my $transactiontype = $transaction->getAttributeNode('type')->getValue;
	my $transactionversion = $transaction->getAttributeNode('version')->getValue;
	my $transactionid = $transaction->getAttributeNode('id')->getValue; #this one is very important to us
	
	my $objectlist = $transaction->getElementsByTagName('object');
	my $objectentityname = $objectlist->[0]->getAttributeNode('entityname')->getValue;
	
	my $attributelist = $transaction->getElementsByTagName('attribute');
	my $n = $attributelist->getLength();
	
	my $answertransaction = $xpa->createElement('transaction');
	$answertransaction->setAttribute('type', $transactiontype);
	
	if ($transactiontype eq "authorization")
	{
		for (my $j = 0; $j < $n; $j++)
		{
			my $attributename = $attributelist->[$j]->getAttributeNode('name')->getValue;
			my $attributevalue = $attributelist->[$j]->getAttributeNode('value')->getValue;
			if ($attributename eq "type")	{
				$dotmactype = $attributevalue;
			} elsif ($attributename eq "password")	{
				$dotmacpassword = $attributevalue;
			} elsif ($attributename eq "username")	{
				$dotmacusername = $attributevalue;
			} elsif ($attributename eq "newtoken")	{
				$dotmacnewtoken = $attributevalue;
			}
		}
		$answertransaction->setAttribute('version', '1.0');
		$answertransaction->setAttribute('id', $transactionid);
		
		# create object
		my $answertransactionobject = $xpa->createElement('object');
		$answertransactionobject->setAttribute('entityid', '100');
		$answertransactionobject->setAttribute('entitytype', '7');
		$answertransactionobject->setAttribute('entityname', '.mac');
		$answertransactionobject->setAttribute('resourceid', '6280071');
		$answertransactionobject->setAttribute('resourceguid', '13D6CA7B-0107-1000-8ECB-000393C02746');
		
		if ($dotmactype eq "basic")
		{
			my $answertransactionobjectattribute = $xpa->createElement('attribute');
			$answertransactionobjectattribute->setAttribute('name', 'token');
			$answertransactionobjectattribute->setAttribute('value', '0000000000012d6e7036bf98b302924b6fdf056e6991c621e4607b6d2476589e19d743d2c0e7bd717df9ea0f53825a138f3e377631c7b24a6928a287acefe627803d218c9464b213e2920a487425f27e726d37eef9ee38dd1cf1af92317b339fd5d91ee995e6a15171f47925375d9f73eb6e2f3f24add3b02e1786f3e9436f1f6674e47f153120f5');
			$answertransactionobject->appendChild($answertransactionobjectattribute);
			
		} elsif ($dotmactype eq "token")
		{
		# stuff from second request
		}
		$answertransaction->appendChild($answertransactionobject);
		
		#create result
		my $answertransactionresult = $xpa->createElement('result');
		my $answertransactionresultattribute1 = $xpa->createElement('attribute');
		$answertransactionresultattribute1->setAttribute('name', 'resultcode');
		$answertransactionresultattribute1->setAttribute('value', '0');
		$answertransactionresult->appendChild($answertransactionresultattribute1);
		my $answertransactionresultattribute2 = $xpa->createElement('attribute');
		$answertransactionresultattribute2->setAttribute('name', 'resulttext');
		$answertransactionresultattribute2->setAttribute('value', 'success');
		$answertransactionresult->appendChild($answertransactionresultattribute2);
		$answertransaction->appendChild($answertransactionresult);
	} elsif ($transactiontype eq "select")
	{
		$answertransaction->setAttribute('version', '1.0');
		$answertransaction->setAttribute('id', '1');
		# create object
		my $answertransactionobject = $xpa->createElement('object');
		$answertransactionobject->setAttribute('entityid', '100');
		$answertransactionobject->setAttribute('entitytype', '7');
		$answertransactionobject->setAttribute('entityname', '.mac');
		$answertransactionobject->setAttribute('resourceid', '6280071');
		$answertransactionobject->setAttribute('resourceguid', '13D6CA7B-0107-1000-8ECB-000393C02746');
		#create result
		my $answertransactionresult = $xpa->createElement('result');
		my $answertransactionresultattribute1 = $xpa->createElement('attribute');
		$answertransactionresultattribute1->setAttribute('name', 'resultcode');
		$answertransactionresultattribute1->setAttribute('value', '0');
		$answertransactionresult->appendChild($answertransactionresultattribute1);
		my $answertransactionresultattribute2 = $xpa->createElement('attribute');
		$answertransactionresultattribute2->setAttribute('name', 'resulttext');
		$answertransactionresultattribute2->setAttribute('value', 'success');
		$answertransactionresult->appendChild($answertransactionresultattribute2);
		$answertransaction->appendChild($answertransactionresult);
	}
	#checking xml tree
	$answer->appendChild($answertransaction);
}
print "Content-Type: text/xml\n\n";
print "<?xml version=\"1.0\" encoding=\"UTF-8\"?>";
print $answer->toString;
# print "i gave ".$answer->toString;
# uncheck following 3 lines if you want to record to your log File
open(LOGGER,">>$logFile") || `cat /dev/null > $logFile;chmod 666 $logFile`;;
print LOGGER "indata was:\n".$my_data."\nI gave 'em \n".$answer->toString."\n\n";
close(LOGGER);
