
# If this is giving you warnings/errors - review your setup
# mod_perl _needs_ to be loaded before _this_ file is parsed!!!
# when you're sure mod_perl is already loaded here, just comment out the following line
#LoadModule perl_module modules/mod_perl.so


LoadModule dbd_module modules/mod_dbd.so
LoadModule authn_dbd_module modules/mod_authn_dbd.so

# You'll want to uncomment this on debian/ubuntu
# on other systems this might already be set in httpd.conf

DirectorySlash On #
#Listen 443
DavDepthInfinity on
LogFormat "%a %v %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"" dotmac
LogLevel Info
ServerTokens Prod

BrowserMatch "^WebDAVFS/" redirect-carefully
BrowserMatch "^DotMacKit" redirect-carefully
BrowserMatch "^DAVKit/" redirect-carefully

<Perl >
$Apache2::PerlSections::Save = 1;
my $conf;
my $configdata;
sub readConf {
		my $filetoread;
		my $line;
	if (-f "/etc/dotmobile.us/conf" ) {
		$filetoread="/etc/dotmobile.us/conf";
		print "Reading Config file from $filetoread\n";
	 } else {
		print "No config file found, Exiting... (Did you run setup/02_setup.pl ?)";
		exit(1);
	}
	open(CONF,"<$filetoread");
	my @tmparr;
	my $varhash={};
	while ($line=<CONF>){
		chomp($line);
		if ($line =~ /.*=.*/) {
			@tmparr=split(/=/,$line);
			$varhash->{@tmparr[0]}=@tmparr[1];
		}
	}
	return $varhash;
}
$configdata=readConf();
################################################################################
### config starts here #########################################################
################################################################################
	# probably these are the only 4 things you want to change
	# the rootpath to notmac
	my $dotMacRootPath = "$configdata->{'DOTMOBILEROOT'}";

	# the IP address of your server
	my $dotMacIPAddress = "$configdata->{'IPADDR'}";

	# the A records pointing to your server
	# this is where the rest of the world will find your users' web pages
	my $dotMacWebAddress = "$configdata->{'LOCALWEBNAME'}"; # for example web.mydomain.com
	my $dotMacHomepagesAddress = "$configdata->{'LOCALWEBNAME'}"; # for example homepage.mydomain.com
	my $dotMacGalleryAddress = "$configdata->{'LOCALGALLERYNAME'}"; # for example gallery.mydomain.com
	my $dotMacFileServicesAddress = "$configdata->{'LOCALIDISKNAME'}";
	my $dotMacPublishAddress = "$configdata->{'LOCALPUBLISHNAME'}";

	#currently the following types are available (Sections Headers Locks TransHandler Body SubreqDebug Gallery Comments)
	#example: my $LoggingTypes = '"Sections Locks"';
	my $LoggingTypes;
	if ($configdata->{'DEBUGOPTIONS'}) {
        	$LoggingTypes = "\"".$configdata->{'DEBUGOPTIONS'}."\"";
	} else {
		$LoggingTypes="'none'";
	}		
################################################################################
### you probably don't want to touch anything below here #######################
################################################################################	
	
	# names, names, names...
	my $dotMacAuthModule = 'DotMac::AuthenDigestDM';
	my $dotMacDBServType = 'sqlite';
	my $dotMacDBServHost = 'localhost';
	my $dotMacDBName = 'dotmac';
	my $dotMacDBUser = 'dotmac';
	my $dotMacDBPasswd = 'dotmac';
	my $dotMacPerlDBI = 'DBI:mysql:database=dotmac;host=localhost';
	my $dotMacApacheRestart = '"none"';
	my $dotMacUserDBName = 'iDiskUsers';
	my $dotMacAdminDBName = 'iDiskAdmins';
	my $dotMacRealm = 'idisk.mac.com';
	my $dotMacInfoDBname = 'info.dat';
	my $dotMacLockTokenDBname = 'locktoken.dat';
	my $dotMacUserTokenDBname = 'usertoken.dat';
	my $dotMacAttrDBname = 'attributes.dat';
	my $dotMacUdataDBname = 'user.dat';
	my $dotMacLogPath = '/var/log/apache2';
	# these are the default locations for dotMac folders (under $dotMacRootPath)
	my $dotMaciDiskPath = "$dotMacRootPath/idisk";
	my $dotMacUserDataPath = "$dotMacRootPath/userxml";
	my $dotMacCertsPath = "$dotMacRootPath/certs";
	my $dotMacPrivatePath = "$dotMacRootPath/private";
	my $dotMacCachePath = "$dotMacRootPath/cache";
	my $dotMacUserDB = "$dotMacPrivatePath/$dotMacUserDBName";
	my $dotMacAdminDB = "$dotMacPrivatePath/$dotMacAdminDBName";
	my $dotMacDbParams = "$dotMacPrivatePath/$dotMacDBName";
	my $dotMacConfigKeyFile = "$dotMacPrivatePath/dotmacconfigkey";
	my $dotMacConfigKeyFileEnc = "$dotMacConfigKeyFile".".enc";
	my $dotMacGalleryProxy = "FALSE"; # Either TRUE or anything else
	my $dotMacDownloadAppleResources = "$configdata->{'GALLERYRESOURCEDOWNLOAD'}"; 
	#local cache
	my @dotMacCachedDirs = ("g", "st", "1");
	#vhosts
	my $dotMacConfigurationPath = "$dotMacRootPath/configuration";
	my $dotMacStubPath = "$dotMacRootPath/stub";
	my $dotMacPerlmodulesPath = "$dotMacRootPath/perlmodules";

	my $dotMacWebServerAlias = $dotMacWebAddress&&"ServerAlias $dotMacWebAddress" || '';
	my $dotMacHomepagesServerAlias = $dotMacHomepagesAddress&&"ServerAlias $dotMacHomepagesAddress" || '';
	my $dotMacGalleryServerAlias = $dotMacGalleryAddress&&"ServerAlias $dotMacGalleryAddress" || '';
################################################################################
### config ends here ###########################################################
################################################################################
	eval "use lib '$dotMacPerlmodulesPath'"; die $@ if $@;
	eval "use Apache2::PerlSections";
	eval "use Apache2::compat"; die $@ if $@;
	eval "use DotMac::CommonCode"; die $@ if $@;
	eval "use DotMac::DotMacDB"; die $@ if $@;
	eval "use Apache::httpd_conf ()";
	eval "use Data::Dumper()";
#	eval "use Apache::AuthenHook"; die $@ if $@;

	push @PerlSetVar, ['dotMacIPAddress' => $dotMacIPAddress];
	push @PerlSetVar, ['dotMacAuthModule' => $dotMacAuthModule];
	push @PerlSetVar, ['dotMacDBServType' => $dotMacDBServType];	
	push @PerlSetVar, ['dotMacDBServHost' => $dotMacDBServHost];	
	push @PerlSetVar, ['dotMacDBName' => $dotMacDBName];	
	push @PerlSetVar, ['dotMacDBUser' => $dotMacDBUser];	
	push @PerlSetVar, ['dotMacDBPasswd' => $dotMacDBPasswd];	
	push @PerlSetVar, ['dotMacPerlDBI' => $dotMacPerlDBI];
	push @PerlSetVar, ['dotMacDBUser' => $dotMacDBUser];
	push @PerlSetVar, ['dotMacDBPasswd' => $dotMacDBPasswd];
	push @PerlSetVar, ['dotMacRootPath' => $dotMacRootPath];
	push @PerlSetVar, ['dotMacPrivatePath' => $dotMacPrivatePath];
	push @PerlSetVar, ['dotMacCachePath' => $dotMacCachePath];
	push @PerlSetVar, ['dotMacCertsPath' => $dotMacCertsPath];
	push @PerlSetVar, ['dotMaciDiskPath' => $dotMaciDiskPath];
	push @PerlSetVar, ['dotMacUserDataPath' => $dotMacUserDataPath];
#	push @PerlSetVar, ['dotMacDBType' => $dotMacDBType];
	push @PerlSetVar, ['dotMacUserDB' => $dotMacUserDB];
	push @PerlSetVar, ['dotMacAdminDB' => $dotMacAdminDB];
	push @PerlSetVar, ['dotMacConfigKeyFile' => $dotMacConfigKeyFile];
	push @PerlSetVar, ['dotMacConfigKeyFileEnc' => $dotMacConfigKeyFileEnc];
	push @PerlSetVar, ['dotMacPerlmodulesPath' => $dotMacPerlmodulesPath];

	push @PerlSetVar, ['dotMacApacheRestart' => $dotMacApacheRestart];
	push @PerlSetVar, ['dotMacRealm' => $dotMacRealm];
	push @PerlSetVar, ['dotMacInfoDBname' => $dotMacInfoDBname];
	push @PerlSetVar, ['dotMacLockTokenDBname' => $dotMacLockTokenDBname];
	push @PerlSetVar, ['dotMacUserTokenDBname' => $dotMacUserTokenDBname];
	push @PerlSetVar, ['dotMacAttrDBname' => $dotMacAttrDBname];
	push @PerlSetVar, ['dotMacUdataDBname' => $dotMacUdataDBname];
	push @PerlSetVar, ['LoggingTypes' => $LoggingTypes];
	push @PerlSetVar, ['dotMacDbParams' => $dotMacDbParams ];
	push @PerlSetVar, ['dotMacGalleryProxy' => $dotMacGalleryProxy ];
	push @PerlSetVar, ['dotMacDownloadAppleResources' => $dotMacDownloadAppleResources ];
	push @PerlSetVar, ['dotMacPublishAddress' => $dotMacPublishAddress];
	push @PerlSetVar, ['dotMacFileServicesAddress' => $dotMacFileServicesAddress];
	foreach my $dotMacCachedDir (@dotMacCachedDirs) {
		#cachedDirs can be retrieved with:
		#my @cachedDirs = $r->dir_config->get('dotMacCachedDirs');
		push @PerlAddVar, ['dotMacCachedDirs' => $dotMacCachedDir];
		push @Alias, [ "/$dotMacCachedDir/" => "$dotMacCachePath/$dotMacCachedDir/" ];
	}
	# vhosts
	push @PerlSetVar, ['dotMacConfigurationPath' => $dotMacConfigurationPath];
	push @PerlSetVar, ['dotMacStubPath' => $dotMacStubPath];
	push @PerlSetVar, ['DumpHeaders_File' => '/tmp/443headersdumped'];


	require DotMac::CommonCode;
	require HTTPD::UserAdmin;
################################################################################
### vhosts start here ##########################################################
################################################################################
# push @Alias, [ '/idiskAdmin/' => '/var/www/dotmac/idiskAdmin/' ];
my $s = Apache2::ServerUtil->server;
if (Apache2::ServerUtil::restart_count() == 1) {
        open(PIDFILE,">$dotMacPrivatePath/dotmac.pid");
        print PIDFILE time();
        close(PIDFILE);
}
$conf = <<"EOC";
NameVirtualHost $dotMacIPAddress:80
DAVLockDB $dotMacRootPath/locks/DAVLockDB
DBDriver sqlite3
DBDParams $dotMacDbParams

PerlOptions +GlobalRequest
<Directory $dotMacRootPath>
	Options All +Indexes
	AllowOverride All
	Order allow,deny
	Allow from all
</Directory>

<VirtualHost $dotMacIPAddress:443>
	ServerName dot.mac.com
	ServerAlias www.mac.com syncmgmt.mac.com idisk.mac.com idisk.me.com configuration.apple.com lcs.mac.com certinfo.mac.com m3.mac.com $dotMacFileServicesAddress
	DocumentRoot $dotMaciDiskPath
	SSLEngine on
	SSLCertificateFile $dotMacPrivatePath/server.crt
	SSLCertificateKeyFile $dotMacPrivatePath/server.key                                                                                                      
	SSLCACertificateFile $dotMacCertsPath/dotmacCA/cacert.pem
	CustomLog $dotMacLogPath/idiskAccesslog dotmac                                                                                                              
	ErrorLog $dotMacLogPath/idiskErrorlog                                                                                                                              
	ServerSignature Off                                                                                                                                      
#	Alias /idiskAdmin $dotMacConfigurationPath/idiskAdmin
	Alias /idiskAdminres $dotMacConfigurationPath/idiskAdminResources
	Alias /configurations/ $dotMacConfigurationPath/configurations/                                                                                  
	PerlTransHandler DotMac::DMTransHandler                
	PerlModule ModPerl::PerlRun
	PerlLogHandler	DotMac::DMStatusLogger                                                                                                                                                                
	
	<LocationMatch /servlet/>
		satisfy any                                                                                                                                          
		SetHandler perl-script                                                                                                                           
		PerlResponseHandler DotMac::ServiceRequest
	</LocationMatch>
	<LocationMatch /WebObjects/Account.woa>                                                                                                                        
		SetHandler perl-script                                                                                                                           
		PerlResponseHandler DotMac::WebObjects::Accountwoa
	</LocationMatch>
	<LocationMatch /WebObjects/WSComments.woa/>                                                                                                                        
		SetHandler perl-script                                                                                                                           
		PerlResponseHandler DotMac::WebObjects::Wscomments
		satisfy any                                                                                                                                      
	</LocationMatch>
	<LocationMatch /WebObjects/Info.woa/wa/>
		SetHandler perl-script
		PerlResponseHandler DotMac::WebObjects::Infowoa::wa
		satisfy any
	</LocationMatch>
	<LocationMatch /WebObjects/RequestRouter.woa/wa/>
		SetHandler perl-script
		PerlResponseHandler DotMac::WebObjects::RequestRouterwoa::wa
		satisfy any
	</LocationMatch>
	<LocationMatch /WebObjects/MobileServices.woa/>                                                                                                                        
		SetHandler perl-script                                                                                                                           
		PerlResponseHandler DotMac::WebObjects::MobileServiceswoa
		satisfy any
	</LocationMatch>
	<LocationMatch /locate>
		SetHandler perl-script
		PerlResponseHandler DotMac::locate
		satisfy any
	</LocationMatch>
	<Location /osxSharedSecret>
		SetHandler perl-script
		PerlResponseHandler DotMac::osxSharedSecret
		Order allow,deny
		Allow from all
		satisfy any
	</Location>
	<Location /_secondaryAccountManagement>
		SetHandler perl-script
		PerlResponseHandler DotMac::SecondaryAcct
	</Location>
	<Location /marketeer>
		SetHandler perl-script
		PerlResponseHandler DotMac::marketeer
	</Location>
	<Location /idiskAdmin/resources>
	</Location>		
	<Location /idiskAdmin>
		SetHandler  perl-script
		Options +ExecCGI
		PerlResponseHandler DotMobileAdmin::main
		AuthType Digest
		AuthName $dotMacRealm
		AuthDigestProvider dbd
		AuthUserFile $dotMacUserDB
		AuthDBDUserRealmQuery "SELECT passwd FROM auth WHERE username = %s AND realm = %s AND is_admin=1"
		AuthDBDUserPWQuery "select passwd from auth where username=%s and is_admin=1"
		Require valid-user
	</Location>	
</VirtualHost>
<VirtualHost $dotMacIPAddress:80>
	ServerName idisk.mac.com
	ServerAlias idisk.me.com publish.mac.com publish.me.com notify.mac.com delta.mac.com configuration.apple.com www.mac.com webservices.mac.com $dotMacFileServicesAddress $dotMacPublishAddress
	DocumentRoot $dotMaciDiskPath
	CustomLog $dotMacLogPath//idiskAccesslog dotmac
	ErrorLog  $dotMacLogPath//idiskErrorlog
	ServerSignature Off
	Alias /configurations/ $dotMacConfigurationPath/configurations/                                                                                  
	PerlTransHandler DotMac::DMTransHandler
	PerlLogHandler  DotMac::DMStatusLogger
	<LocationMatch /locate> 
		SetHandler perl-script
		PerlResponseHandler DotMac::locate
		satisfy any
	</LocationMatch>
	<LocationMatch /WebObjects/WSComments.woa/>
		SetHandler  perl-script
		PerlResponseHandler DotMac::WebObjects::Wscomments
		satisfy  any
	</LocationMatch>
	<LocationMatch /dotMacCA.pem>
		Allow from Any
	</LocationMatch>
	<LocationMatch /signing>
		SetHandler perl-script
		PerlResponseHandler DotMac::CertUtils
		require valid-user
                AuthType Digest
                AuthName idisk.mac.com
                AuthDigestProvider dbd
                AuthUserFile $dotMacUserDB
                AuthDBDUserRealmQuery "SELECT passwd FROM auth WHERE username = %s AND realm = %s"
                AuthDBDUserPWQuery "select passwd from auth where username=%s"

	</LocationMatch>

	<LocationMatch /archive>
		SetHandler perl-script
		PerlResponseHandler DotMac::CertUtils
		require valid-user
                AuthType Digest
                AuthName idisk.mac.com
                AuthDigestProvider dbd
                AuthUserFile $dotMacUserDB
                AuthDBDUserRealmQuery "SELECT passwd FROM auth WHERE username = %s AND realm = %s"
                AuthDBDUserPWQuery "select passwd from auth where username=%s"

	</LocationMatch>

	<LocationMatch /WebObjects/Comments.woa/wa>
		SetHandler  perl-script
		PerlResponseHandler DotMac::WebObjects::Comments::wa
		satisfy  any
	</LocationMatch>
	<LocationMatch /notify>
		SetHandler  perl-script
		PerlResponseHandler DotMac::Notify
	</LocationMatch>
	<Location /_domainHosting>
		SetHandler perl-script
		PerlResponseHandler DotMac::domainHosting
		satisfy any
	</Location>
	<LocationMatch /status> 
		SetHandler  perl-script
		PerlResponseHandler DotMac::Status
		AuthType Digest
		AuthName idisk.mac.com
		AuthDigestProvider dbd
		AuthUserFile $dotMacUserDB
		AuthDBDUserRealmQuery "SELECT passwd FROM auth WHERE username = %s AND realm = %s"
		AuthDBDUserPWQuery "select passwd from auth where username=%s"
		Require  valid-user
	</LocationMatch>
</VirtualHost>

<VirtualHost $dotMacIPAddress:80>
	ServerName homepage.mac.com
	$dotMacHomepagesServerAlias
	DocumentRoot $dotMaciDiskPath
	CustomLog $dotMacLogPath//idiskAccesslog dotmac
	ErrorLog  $dotMacLogPath//idiskErrorlog
	ServerSignature Off
	AliasMatch ^/*/([^/]*)/?(.*) $dotMaciDiskPath/\$1/Sites/\$2
	DirectorySlash On
	<DirectoryMatch ^$dotMaciDiskPath/(.*)/Sites/>
		<LimitExcept GET HEAD>
			require user $user
		</LimitExcept>
	</DirectoryMatch>
</VirtualHost>

<VirtualHost $dotMacIPAddress:80>
	ServerName web.mac.com
	$dotMacWebServerAlias
	DocumentRoot $dotMaciDiskPath
	CustomLog $dotMacLogPath//idiskAccesslog dotmac
	ErrorLog  $dotMacLogPath//idiskErrorlog
	ServerSignature Off
	AliasMatch ^/*/([^/]*)/?(.*) $dotMaciDiskPath/\$1/Web/Sites/\$2
	DirectorySlash On
	<DirectoryMatch ^$dotMaciDiskPath/(.*)/Web/Sites/>
		<Limit GET HEAD OPTIONS PROPFIND>
			satisfy any
		</Limit>
	</DirectoryMatch>
#TODO: OK, this is pretty ugly. any better way to handle it?
        RewriteEngine On
        RewriteLog /tmp/rewrite.log
        RewriteLogLevel 3
        RewriteCond %{QUERY_STRING} wsc=entry.js
        RewriteRule (.*)\$ \$1/entry.js [PT]
	<LocationMatch .*/entry.js>
		SetHandler perl-script
		PerlResponseHandler DotMac::WebObjects::Wscomments::JSON
		satisfy  any
	</LocationMatch>
        RewriteCond %{QUERY_STRING} wsc=summary.js
        RewriteRule (.*)\$ \$1/summary.js [PT]
	<LocationMatch .*/summary.js>
		SetHandler perl-script
		PerlResponseHandler DotMac::WebObjects::Wscomments::JSON
		satisfy  any
	</LocationMatch>
</VirtualHost>

<VirtualHost $dotMacIPAddress:80>
	ServerName gallery.mac.com
	$dotMacGalleryServerAlias gallery.me.com
	PerlTransHandler DotMac::GalleryTransHandler
	DocumentRoot $dotMaciDiskPath
	LogLevel info
	CustomLog $dotMacLogPath//idiskAccesslog dotmac
	ErrorLog  $dotMacLogPath//idiskErrorlog 
	ServerSignature Off
	<Location /robots.txt>
		Allow from any
	</Location>
	<Location /index.html>
		Allow from any
	</Location>
	<DirectoryMatch ^$dotMaciDiskPath/(.*)/Web/Sites/_gallery(.*)>
		<Limit GET HEAD OPTIONS PROPFIND>
			satisfy any
		</Limit>
	</DirectoryMatch>
</VirtualHost>


<Directory $dotMaciDiskPath>
	AuthType Digest
	AuthName $dotMacRealm
	AuthDigestProvider dbd
	AuthUserFile $dotMacUserDB
	AuthDBDUserRealmQuery "SELECT passwd FROM auth WHERE username = %s AND realm = %s"
	AuthDBDUserPWQuery "select passwd from auth where username=%s"

#	Options indexes
	PerlFixupHandler DotMac::DMFixupHandler
</Directory>
<Directory $dotMaciDiskPath/*>
	Deny from all
</Directory>
<Directory $dotMaciDiskPath/1>
	Allow from all
</Directory>
<Directory $dotMaciDiskPath/st>
	Allow from all
</Directory>
<Directory $dotMaciDiskPath/if>
	Allow from all
</Directory>
<Directory $dotMaciDiskPath/i>
	Allow from all
</Directory>
#FIXME: just temporary, remove!
<Directory $dotMaciDiskPath/Comments.woa>
	Allow from all
</Directory>
<Directory $dotMaciDiskPath/WebObjects/Comments.woa>
	Allow from all
</Directory>

EOC
#print STDOUT "$conf\n";
$s->add_config([split /\n/,$conf]);

my $perUserConf;
my $dmdb = DotMac::DotMacDB::->new(cfg_array => \@PerlSetVar);
my @users = $dmdb->list_users_idisk($dotMacRealm);

for my $user (@users) {
	#users can be retrieved with:
	#my @users = $r->dir_config->get('dotMacUsers');
	push @PerlAddVar, ['dotMacUsers' => $user];
#	print STDOUT "$user\n";
	my $userquota = $dmdb->get_user_quota($user,$dotMacRealm);
	$userquota = 0 if ($userquota eq "");
	$perUserConf =<<"EOPC";
<Directory $dotMaciDiskPath/$user>
	Dav On
	DAVSATMaxAreaSize $userquota
	require user $user
	order Deny,Allow
	allow from all
</Directory>
<Directory $dotMaciDiskPath/$user/Public/>
	satisfy any
	PerlAccessHandler DotMac::PublicFolderAccess
</Directory>
Alias /$user-Public $dotMaciDiskPath/$user/Public/

EOPC
$s->add_config([split /\n/,$perUserConf]);
}

$dmdb="";

if ($configdata->{'QUIETSTARTUP'} =~ /NO/) {
        print STDOUT $conf;
}

</Perl>


